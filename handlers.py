from aiogram import Router, F
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
import logging
from datetime import datetime

from models import UserProfile, DailyLog, FoodEntry, WorkoutEntry
from config import config
from ai_service import ai_service, AIServiceError
from weather_service import weather_service, WeatherServiceError

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

router = Router()
users: dict[int, UserProfile] = {}
daily_logs: dict[int, DailyLog] = {}

def get_main_keyboard(has_profile: bool = False) -> ReplyKeyboardMarkup:
    """Get the main keyboard based on whether user has a profile."""
    buttons = []
    if not has_profile:
        buttons.append([KeyboardButton(text="/start"), KeyboardButton(text="/set_profile")])
    else:
        buttons.extend([
            [KeyboardButton(text="/status"), KeyboardButton(text="/weather")],
            [KeyboardButton(text="/log_water"), KeyboardButton(text="/log_food")],
            [KeyboardButton(text="/log_workout"), KeyboardButton(text="/help")]
        ])
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

AVAILABLE_COMMANDS = {
    "start": "üëã –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º",
    "set_profile": "üìù –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
    "status": "üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å",
    "weather": "üå° –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–≥–æ–¥—É –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
    "log_water": "üíß –ó–∞–ø–∏—Å–∞—Ç—å –≤—ã–ø–∏—Ç—É—é –≤–æ–¥—É",
    "log_food": "üçé –ó–∞–ø–∏—Å–∞—Ç—å —Å—ä–µ–¥–µ–Ω–Ω—É—é –µ–¥—É",
    "log_workout": "üèÉ‚Äç‚ôÇÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É",
    "help": "‚ùì –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"
}

class ProfileStates(StatesGroup):
    waiting_for_weight = State()
    waiting_for_height = State()
    waiting_for_age = State()
    waiting_for_activity = State()
    waiting_for_city = State()

async def verify_city(city: str) -> bool:
    try:
        await weather_service.get_weather(city)
        return True
    except WeatherServiceError:
        return False

@router.message(CommandStart())
async def cmd_start(message: Message):
    logger.info(f"New user started bot: {message.from_user.id}")
    has_profile = message.from_user.id in users
    
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–æ–¥—ã, –∫–∞–ª–æ—Ä–∏–π –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_profile —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–ª–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.",
        reply_markup=get_main_keyboard(has_profile)
    )

@router.message(Command("help"))
async def cmd_help(message: Message):
    logger.info(f"User {message.from_user.id} requested help")
    has_profile = message.from_user.id in users
    
    commands_text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n" + "\n".join(
        f"/{cmd} - {desc}" for cmd, desc in AVAILABLE_COMMANDS.items()
    )
    
    if not has_profile:
        commands_text += "\n\n‚ö†Ô∏è –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é /set_profile —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º!"
    
    await message.answer(
        commands_text,
        reply_markup=get_main_keyboard(has_profile)
    )

@router.message(Command("set_profile"))
async def cmd_set_profile(message: Message, state: FSMContext):
    logger.info(f"User {message.from_user.id} started profile setup")
    await state.set_state(ProfileStates.waiting_for_weight)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):",
        reply_markup=ReplyKeyboardRemove()
    )

@router.message(ProfileStates.waiting_for_weight)
async def process_weight(message: Message, state: FSMContext):
    try:
        weight = float(message.text)
        if weight <= 0 or weight > 300:
            raise ValueError("Weight out of reasonable range")
        logger.info(f"User {message.from_user.id} set weight: {weight}kg")
        await state.update_data(weight=weight)
        await state.set_state(ProfileStates.waiting_for_height)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):")
    except ValueError as e:
        logger.warning(f"Invalid weight input from user {message.from_user.id}: {message.text}")
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 300).")

@router.message(ProfileStates.waiting_for_height)
async def process_height(message: Message, state: FSMContext):
    try:
        height = float(message.text)
        if height <= 0 or height > 250:
            raise ValueError("Height out of reasonable range")
        logger.info(f"User {message.from_user.id} set height: {height}cm")
        await state.update_data(height=height)
        await state.set_state(ProfileStates.waiting_for_age)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    except ValueError as e:
        logger.warning(f"Invalid height input from user {message.from_user.id}: {message.text}")
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 250).")

@router.message(ProfileStates.waiting_for_age)
async def process_age(message: Message, state: FSMContext):
    try:
        age = int(message.text)
        if age <= 0 or age > 120:
            raise ValueError("Age out of reasonable range")
        logger.info(f"User {message.from_user.id} set age: {age}")
        await state.update_data(age=age)
        await state.set_state(ProfileStates.waiting_for_activity)
        await message.answer("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É –≤–∞—Å –≤ –¥–µ–Ω—å?")
    except ValueError as e:
        logger.warning(f"Invalid age input from user {message.from_user.id}: {message.text}")
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 120).")

@router.message(ProfileStates.waiting_for_activity)
async def process_activity(message: Message, state: FSMContext):
    try:
        activity = int(message.text)
        if activity < 0 or activity > 1440:  # Max minutes in a day
            raise ValueError("Activity minutes out of reasonable range")
        logger.info(f"User {message.from_user.id} set activity: {activity}min/day")
        await state.update_data(activity_minutes=activity)
        await state.set_state(ProfileStates.waiting_for_city)
        await message.answer("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?")
    except ValueError as e:
        logger.warning(f"Invalid activity input from user {message.from_user.id}: {message.text}")
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç (–æ—Ç 0 –¥–æ 1440).")

@router.message(ProfileStates.waiting_for_city)
async def process_city(message: Message, state: FSMContext):
    city = message.text.strip()
    if not await verify_city(city):
        logger.warning(f"Invalid city input from user {message.from_user.id}: {city}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    data = await state.get_data()
    data["city"] = city
    data["user_id"] = message.from_user.id
    
    users[message.from_user.id] = UserProfile(**data)
    daily_logs[message.from_user.id] = DailyLog(date=datetime.now())
    
    logger.info(f"User {message.from_user.id} completed profile setup with city: {city}")
    
    try:
        weather = await weather_service.get_weather(city)
        await message.answer(
            "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
            f"üå° –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞: {weather.temperature}¬∞C, {weather.description}\n"
            f"üíß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –≤–æ–¥–µ: {'–ü–µ–π—Ç–µ –±–æ–ª—å—à–µ –≤–æ–¥—ã –∏–∑-–∑–∞ –∂–∞—Ä–∫–æ–π –ø–æ–≥–æ–¥—ã!' if weather.temperature > 25 else '–ù–æ—Ä–º–∞ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –≤–æ–¥—ã –æ–±—ã—á–Ω–∞—è.'}\n"
            f"üèÉ‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ —É–ª–∏—Ü–µ: {'—Ä–µ–∫–æ–º–µ–Ω–¥—É—é—Ç—Å—è' if weather.is_outdoor_friendly else '–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é—Ç—Å—è'}\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/log_water <–º–ª> - –∑–∞–ø–∏—Å–∞—Ç—å –≤—ã–ø–∏—Ç—É—é –≤–æ–¥—É\n"
            "/log_food <–æ–ø–∏—Å–∞–Ω–∏–µ –µ–¥—ã> - –∑–∞–ø–∏—Å–∞—Ç—å —Å—ä–µ–¥–µ–Ω–Ω—É—é –µ–¥—É\n"
            "/log_workout <–æ–ø–∏—Å–∞–Ω–∏–µ> - –∑–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É\n"
            "/status - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
            "/weather - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–≥–æ–¥—É –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
            "/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º",
            reply_markup=get_main_keyboard(True)
        )
    except WeatherServiceError as e:
        logger.error(f"Weather service error for user {message.from_user.id}: {str(e)}")
        await message.answer(
            "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –ø–æ–≥–æ–¥—ã.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.",
            reply_markup=get_main_keyboard(True)
        )
    finally:
        await state.clear()

@router.message(Command("weather"))
async def cmd_weather(message: Message):
    if not await handle_protected_command(message):
        return
    
    try:
        weather = await weather_service.get_weather(users[message.from_user.id].city)
        intensity_factor, intensity_explanation = weather_service.get_workout_adjustment(weather)
        
        await message.answer(
            f"üå° –ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {users[message.from_user.id].city}:\n"
            f"  ‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather.temperature}¬∞C\n"
            f"  ‚Ä¢ –í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather.humidity}%\n"
            f"  ‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {weather.description}\n\n"
            f"üíß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –≤–æ–¥–µ: {'–£–≤–µ–ª–∏—á—å—Ç–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–æ–¥—ã!' if weather.temperature > 25 else '–û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –≤–æ–¥—ã.'}\n"
            f"üèÉ‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ —É–ª–∏—Ü–µ: {'—Ä–µ–∫–æ–º–µ–Ω–¥—É—é—Ç—Å—è' if weather.is_outdoor_friendly else '–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é—Ç—Å—è'}\n"
            f"üí™ –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {intensity_explanation}",
            reply_markup=get_main_keyboard(True)
        )
    except WeatherServiceError as e:
        logger.error(f"Weather service error for user {message.from_user.id}: {str(e)}")
        await message.answer(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard(True)
        )

@router.message(Command("log_water"))
async def cmd_log_water(message: Message):
    if not await handle_protected_command(message):
        return
        
    try:
        parts = message.text.split()
        if len(parts) == 1:
            # If no amount provided, show help
            await message.answer(
                "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –≤ –º–∏–ª–ª–∏–ª–∏—Ç—Ä–∞—Ö –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: /log_water 250",
                reply_markup=get_main_keyboard(True)
            )
            return
            
        amount = float(parts[1])
        if amount <= 0 or amount > 5000:
            raise ValueError("Water amount out of reasonable range")
            
        user_id = message.from_user.id
        if user_id not in daily_logs:
            daily_logs[user_id] = DailyLog(date=datetime.now())
        
        try:
            weather = await weather_service.get_weather(users[user_id].city)
            daily_logs[user_id].water_intake += amount
            water_norm = users[user_id].calculate_water_norm(weather.temperature)
            
            extra_message = ""
            if weather.temperature > 25:
                extra_message = "\n‚ö†Ô∏è –ò–∑-–∑–∞ –∂–∞—Ä–∫–æ–π –ø–æ–≥–æ–¥—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–∏—Ç—å –±–æ–ª—å—à–µ –≤–æ–¥—ã!"
            
            logger.info(f"User {user_id} logged water intake: {amount}ml")
            await message.answer(
                f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {amount}–º–ª –≤–æ–¥—ã\n"
                f"üíß –í—Å–µ–≥–æ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {daily_logs[user_id].water_intake}–º–ª\n"
                f"üéØ –î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞: {water_norm}–º–ª\n"
                f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {daily_logs[user_id].water_intake/water_norm*100:.1f}%"
                f"{extra_message}",
                reply_markup=get_main_keyboard(True)
            )
        except WeatherServiceError as e:
            logger.error(f"Weather service error for user {user_id}: {str(e)}")
            await message.answer(
                f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {amount}–º–ª –≤–æ–¥—ã\n"
                "‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–æ—Ä–º—ã –≤–æ–¥—ã.",
                reply_markup=get_main_keyboard(True)
            )
    except (ValueError, IndexError) as e:
        logger.warning(f"Invalid water input from user {message.from_user.id}: {message.text}")
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /log_water <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –º–ª> (–æ—Ç 1 –¥–æ 5000)\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: /log_water 250",
            reply_markup=get_main_keyboard(True)
        )

@router.message(Command("log_food"))
async def cmd_log_food(message: Message):
    try:
        food_description = " ".join(message.text.split()[1:])
        if not food_description:
            raise IndexError("Empty food description")
            
        user_id = message.from_user.id
        if user_id not in users:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é /set_profile")
            return
            
        if user_id not in daily_logs:
            daily_logs[user_id] = DailyLog(date=datetime.now())
        
        try:
            calories, explanation = await ai_service.estimate_food_calories(food_description)
            
            food_entry = FoodEntry(
                food_name=food_description,
                calories=calories,
                timestamp=datetime.now(),
                explanation=explanation
            )
            
            daily_logs[user_id].calorie_intake += calories
            daily_logs[user_id].food_log.append(food_entry)
            daily_logs[user_id].update_bmr_calories(users[user_id])
            
            logger.info(f"User {user_id} logged food: {food_description} ({calories}kcal)")
            
            calorie_norm = users[user_id].calculate_calorie_norm()
            await message.answer(
                f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {food_description}\n"
                f"üçé –ö–∞–ª–æ—Ä–∏–∏: {calories}–∫–∫–∞–ª ({explanation})\n"
                f"üìä –í—Å–µ–≥–æ –∫–∞–ª–æ—Ä–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {daily_logs[user_id].calorie_intake}–∫–∫–∞–ª\n"
                f"üéØ –î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞: {calorie_norm}–∫–∫–∞–ª\n"
                f"‚öñÔ∏è –ë–∞–ª–∞–Ω—Å: {daily_logs[user_id].calculate_calorie_balance():.1f}–∫–∫–∞–ª"
            )
        except AIServiceError as e:
            logger.error(f"AI service error for user {user_id}: {str(e)}")
            await message.answer(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ü–µ–Ω–∫–æ–π –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç—å –±–ª—é–¥–æ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    except IndexError:
        logger.warning(f"Invalid food input from user {message.from_user.id}: {message.text}")
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /log_food <–æ–ø–∏—Å–∞–Ω–∏–µ –µ–¥—ã>")

@router.message(Command("log_workout"))
async def cmd_log_workout(message: Message):
    try:
        description = " ".join(message.text.split()[1:])
        if not description:
            raise IndexError("Empty workout description")
        
        user_id = message.from_user.id
        if user_id not in users:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é /set_profile")
            return
            
        if user_id not in daily_logs:
            daily_logs[user_id] = DailyLog(date=datetime.now())
        
        try:
            # Parse workout description
            workout_type, minutes, parse_explanation = await ai_service.parse_workout_description(description)
            
            if minutes <= 0 or minutes > 480:  # Max 8 hours
                raise ValueError("Workout duration out of reasonable range")
            
            # Get weather and calculate adjustments
            weather = await weather_service.get_weather(users[user_id].city)
            intensity_factor, intensity_explanation = weather_service.get_workout_adjustment(weather)
            
            # Calculate calories
            calories, explanation = await ai_service.estimate_workout_calories(
                workout_type, minutes, users[user_id].weight
            )
            
            # Adjust calories based on weather
            adjusted_calories = calories * intensity_factor
            
            workout_entry = WorkoutEntry(
                workout_type=workout_type,
                minutes=minutes,
                calories=adjusted_calories,
                timestamp=datetime.now(),
                explanation=f"{explanation} ({intensity_explanation})"
            )
            
            daily_logs[user_id].calorie_burned_exercise += adjusted_calories
            daily_logs[user_id].workout_log.append(workout_entry)
            daily_logs[user_id].update_bmr_calories(users[user_id])
            
            logger.info(f"User {user_id} logged workout: {workout_type} for {minutes}min ({adjusted_calories}kcal)")
            
            outdoor_warning = "" if weather.is_outdoor_friendly else "\n‚ö†Ô∏è –ü–æ–≥–æ–¥–∞ –Ω–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–∞ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞ —É–ª–∏—Ü–µ!"
            duration_note = f" ({parse_explanation})" if "–ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞" in parse_explanation else ""
            
            await message.answer(
                f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {workout_type} - {minutes}–º–∏–Ω{duration_note}\n"
                f"üå° {intensity_explanation}\n"
                f"üî• –°–æ–∂–∂–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π: {adjusted_calories:.1f}–∫–∫–∞–ª ({explanation})\n"
                f"üí™ –í—Å–µ–≥–æ —Å–æ–∂–∂–µ–Ω–æ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
                f"  ‚Ä¢ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {daily_logs[user_id].calorie_burned_exercise:.1f}–∫–∫–∞–ª\n"
                f"  ‚Ä¢ –ë–∞–∑–æ–≤—ã–π –æ–±–º–µ–Ω: {daily_logs[user_id].calorie_burned_bmr:.1f}–∫–∫–∞–ª\n"
                f"  ‚Ä¢ –í—Å–µ–≥–æ: {daily_logs[user_id].calculate_calorie_burned():.1f}–∫–∫–∞–ª"
                f"{outdoor_warning}"
            )
        except (AIServiceError, WeatherServiceError) as e:
            logger.error(f"Service error for user {user_id}: {str(e)}")
            await message.answer(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å —Ä–∞—Å—á–µ—Ç–æ–º –∫–∞–ª–æ—Ä–∏–π.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
            )
    except IndexError:
        logger.warning(f"Empty workout description from user {message.from_user.id}")
        await message.answer(
            "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /log_workout\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "‚Ä¢ /log_workout –±–µ–≥–∞–ª 30 –º–∏–Ω—É—Ç\n"
            "‚Ä¢ /log_workout –ø–ª–∞–≤–∞–Ω–∏–µ —á–∞—Å —Å –Ω–µ–±–æ–ª—å—à–∏–º\n"
            "‚Ä¢ /log_workout –ø–æ–±–µ–≥–∞–ª –æ—Ç —Å–æ–±–∞–∫ –º–∏–Ω—É—Ç 10"
        )
    except ValueError as e:
        logger.warning(f"Invalid workout duration from user {message.from_user.id}: {str(e)}")
        await message.answer("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 480 –º–∏–Ω—É—Ç (8 —á–∞—Å–æ–≤).")

@router.message(Command("status"))
async def cmd_status(message: Message):
    if not await handle_protected_command(message):
        return
        
    user_id = message.from_user.id
    if user_id not in daily_logs:
        daily_logs[user_id] = DailyLog(date=datetime.now())
    
    user = users[user_id]
    log = daily_logs[user_id]
    log.update_bmr_calories(user)
    
    try:
        weather = await weather_service.get_weather(user.city)
        water_norm = user.calculate_water_norm(weather.temperature)
        calorie_norm = user.calculate_calorie_norm()
        
        logger.info(f"User {user_id} requested status")
        
        weather_advice = ""
        if weather.temperature > 25:
            weather_advice = "\n‚ö†Ô∏è –ò–∑-–∑–∞ –∂–∞—Ä–∫–æ–π –ø–æ–≥–æ–¥—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–∏—Ç—å –±–æ–ª—å—à–µ –≤–æ–¥—ã!"
        elif not weather.is_outdoor_friendly:
            weather_advice = "\n‚ö†Ô∏è –ü–æ–≥–æ–¥–∞ –Ω–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–∞ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞ —É–ª–∏—Ü–µ!"
        
        await message.answer(
            f"üìä –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
            f"üíß –í–æ–¥–∞: {log.water_intake}/{water_norm}–º–ª "
            f"({log.water_intake/water_norm*100:.1f}%)\n"
            f"üçé –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π: {log.calorie_intake}–∫–∫–∞–ª\n"
            f"üî• –†–∞—Å—Ö–æ–¥ –∫–∞–ª–æ—Ä–∏–π:\n"
            f"  ‚Ä¢ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {log.calorie_burned_exercise:.1f}–∫–∫–∞–ª\n"
            f"  ‚Ä¢ –ë–∞–∑–æ–≤—ã–π –æ–±–º–µ–Ω: {log.calorie_burned_bmr:.1f}–∫–∫–∞–ª\n"
            f"  ‚Ä¢ –í—Å–µ–≥–æ: {log.calculate_calorie_burned():.1f}–∫–∫–∞–ª\n"
            f"‚öñÔ∏è –ë–∞–ª–∞–Ω—Å –∫–∞–ª–æ—Ä–∏–π: {log.calculate_calorie_balance():.1f}–∫–∫–∞–ª\n"
            f"üå° –ü–æ–≥–æ–¥–∞: {weather.temperature}¬∞C, {weather.description}"
            f"{weather_advice}",
            reply_markup=get_main_keyboard(True)
        )
    except WeatherServiceError as e:
        logger.error(f"Weather service error for user {user_id}: {str(e)}")
        await message.answer(
            f"üìä –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
            f"üçé –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π: {log.calorie_intake}–∫–∫–∞–ª\n"
            f"üî• –†–∞—Å—Ö–æ–¥ –∫–∞–ª–æ—Ä–∏–π:\n"
            f"  ‚Ä¢ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {log.calorie_burned_exercise:.1f}–∫–∫–∞–ª\n"
            f"  ‚Ä¢ –ë–∞–∑–æ–≤—ã–π –æ–±–º–µ–Ω: {log.calorie_burned_bmr:.1f}–∫–∫–∞–ª\n"
            f"  ‚Ä¢ –í—Å–µ–≥–æ: {log.calculate_calorie_burned():.1f}–∫–∫–∞–ª\n"
            f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ",
            reply_markup=get_main_keyboard(True)
        )

@router.message(Command(commands=["status", "weather", "log_water", "log_food", "log_workout"]))
async def handle_protected_command(message: Message):
    """Handle commands that require a profile."""
    if message.from_user.id not in users:
        await message.answer(
            "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é /set_profile",
            reply_markup=get_main_keyboard(False)
        )
        return False
    return True

@router.message(F.text.startswith('/'))
async def handle_unknown_command(message: Message):
    """Handle unknown commands."""
    command = message.text.split()[0][1:]  # Remove the '/' and get the command name
    if command not in AVAILABLE_COMMANDS:
        has_profile = message.from_user.id in users
        logger.warning(f"User {message.from_user.id} tried unknown command: {command}")
        await message.answer(
            f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: /{command}\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
            reply_markup=get_main_keyboard(has_profile)
        ) 